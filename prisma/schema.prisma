datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  username       String
  email          String          @unique
  password       String?
  avatar         String          @default("https://app.boom360trader.com/uploads/user.png")
  fcmToken       String?
  subcription    Boolean?        @default(false)
  accessToken    String?
  customerId     String?
  priceId        String?
  subscriptionId String?
  role           UserRole        @default(USER)
  roleId         String?
  status         UserStatus      @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accessGroup    String?
  group          Group[]
  chanel         Chanel[]
  message        Message[]
  notifications  Notifications[]

  @@map("users")
}

model Group {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?  @db.ObjectId
  groupName  String
  groupImage String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  chanel     Chanel[]

  @@map("groups")
}

model Chanel {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?         @db.ObjectId
  groupId       String?         @db.ObjectId
  chanelName    String
  chanelImage   String
  description   String
  memberIds     String[]
  chanelType    ChanelType      @default(PRIVATE)
  traderLink    String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User?           @relation(fields: [userId], references: [id])
  group         Group?          @relation(fields: [groupId], references: [id])
  messages      Message[]
  notifications Notifications[]

  @@map("chanels")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String?
  files     String[]
  senderId  String?  @db.ObjectId
  channelId String?  @db.ObjectId
  replyId   String?  @db.ObjectId
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [senderId], references: [id])
  channel   Chanel?  @relation(fields: [channelId], references: [id])

  @@map("messages")
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String?  @db.ObjectId
  channelId  String?  @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [receiverId], references: [id])
  channel    Chanel?  @relation(fields: [channelId], references: [id])

  @@map("notifications")
}

model HomeContent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  description String
  content     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("home_contents")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
}

enum ChanelType {
  PUBLIC
  PRIVATE
}
