datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
 
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  phone          String          @unique      
  name           String?
  about           String?
  otp             String?
  otpExpiresIn    DateTime?
  email          String?
  avatar         String          @default("https://app.boom360trader.com/uploads/user.png")
  fcmToken       String?
  subcription    Boolean?        @default(false)
  accessToken    String?
  customerId     String?
  priceId        String?
  subscriptionId String?
  profileCompleted  Boolean @default(false)
  role           UserRole        @default(USER)
  roleId         String?
  status         UserStatus      @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
 
  groupUser     GroupUser[]
  channel         Channel[]
  message        Message[]
  contactList   ContactList?
  contacts     Contacts[]
  userMessage    UserMessage[]
  notifications  Notifications[]
  subscription   Subscription[]
  blockedUsers   BlockUser[] @relation(name: "blocker")
  blockedBy      BlockUser[]  @relation(name: "blocked")

  @@map("users")
}



model Chat {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  
  user1Id String   @db.ObjectId
  user2Id String   @db.ObjectId
  chatMessages UserMessage[]
  isStreaming Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt     
 
}


// model ChatUser {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   chatId  String   @db.ObjectId
//   userId  String   @db.ObjectId
//   user    User     @relation(name: "chatUser", fields: [userId], references: [id])
//   chat    Chat     @relation(fields: [chatId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([chatId, userId])
//   @@map("chat_users")
// }
model BlackList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId  String   @db.ObjectId
  recieverId    String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("black_list")
  @@unique([ownerId, recieverId])
}


model Group {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  about       String? 
  adminId     String  @db.ObjectId
  groupName   String? 
  groupType   GroupType @default(ROOM)
  groupImage  String?
  isStreaming Boolean   @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  message    UserMessage[]
  channel     Channel[]
  groupUsers  GroupUser[]

  @@map("groups")
}

enum GroupType {
  ROOM
  GROUP
}

  
model GroupUser {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId String   @db.ObjectId
  userId  String   @db.ObjectId
  isAdmin Boolean @default(false)
  isMuted Boolean @default(false)
  group   Group    @relation(fields: [groupId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt
  @@unique([groupId, userId])
  @@map("group_users")
}


model UserMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String?
  files     String[]
  senderId  String    @db.ObjectId
  groupId   String    @db.ObjectId
  replyId   String?   @db.ObjectId
  isRead    Boolean   @default(false)
  isPinned  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?    @relation(fields: [senderId], references: [id])
  group   Group?      @relation(fields: [groupId], references: [id])
  chat     Chat?       @relation(fields: [replyId], references: [id])

  @@map("user_messages")
}


model BlockUser {
  id            String  @id @default(auto())  @map("_id") @db.ObjectId
  blockerId     String  @db.ObjectId
  blockedId     String  @db.ObjectId

  blocker       User @relation(name: "blocker", fields: [blockerId], references: [id])
  blocked       User @relation(name: "blocked", fields: [blockedId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@unique([blockedId, blockerId])
@@map("blocked_users")
}



model ContactList {
  id      String          @id @default(auto()) @map("_id") @db.ObjectId

  ownerId    String      @db.ObjectId @unique

  owner     User    @relation(fields: [ownerId], references: [id])

  contacts    Contacts[]   

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@unique([ownerId,id])
}

model Contacts {
  id          String        @id  @default(auto())  @map("_id") @db.ObjectId
  contactListId    String    @db.ObjectId

  contatctList    ContactList?     @relation(fields: [contactListId], references: [id])
  contactId          String    @db.ObjectId

  user            User?      @relation(fields: [contactId], references: [id])
}


model Channel {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?         @db.ObjectId
  groupId       String?         @db.ObjectId
  channelName    String?
  channelImage   String?
  description   String
  memberIds     String[]
  chanelType    ChanelType      @default(PRIVATE)
  traderLink    String?
  isStreaming   Boolean?        @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User?           @relation(fields: [userId], references: [id])
  group         Group?          @relation(fields: [groupId], references: [id])
  messages      Message[]
  notifications Notifications[]

  @@map("channels")
}

model Recording {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  channelId     String
  channelName   String
  channelUid    String
  recordingLink String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("recordings")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String?
  files     String[]
  senderId  String?  @db.ObjectId
  channelId String?  @db.ObjectId
  replyId   String?  @db.ObjectId
  isRead    Boolean  @default(false)
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [senderId], references: [id])
  channel   Channel?  @relation(fields: [channelId], references: [id])


  @@map("messages")
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String?  @db.ObjectId
  channelId  String?  @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [receiverId], references: [id])
  channel    Channel?  @relation(fields: [channelId], references: [id])

  @@map("notifications")
}

model HomeContent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  description String
  content     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("home_contents")
}

model Subscription {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?  @db.ObjectId
  priceId        String
  subscriptionId String
  role           String
  group          String
  status         String
  user           User?    @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("subscriptions")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
}

enum ChanelType {
  PUBLIC
  PRIVATE
}
enum MessageType {
  TEXT
  FILE
}
